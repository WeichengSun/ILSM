else{
sauve.fastc <- function(web,m,M) {
web[,sample(ncol(web))]<-web
m[M[[2]],M[[3]]]<-web
return(m)
}
return(replicate(N, sauve.fastc(web,m,M), simplify = FALSE))
}
}
MAT[V(trinet)$level==0,V(trinet)$level==1]<-null_P
null_P<-SauveR(1,matP,type="col")
SauveR<-function(N,m,type=c("row","col")){
M<-m#emptyR(m)
web <- as.matrix(M[[1]])
if(type=="row"){
sauve.fastr <- function(web,m,M) {
web[sample(sample(nrow(web))),]<-web
m[M[[2]],M[[3]]]<-web
return(m)
}
return(replicate(N, sauve.fastr(web,m,M), simplify = FALSE))
}
else{
sauve.fastc <- function(web,m,M) {
web[,sample(ncol(web))]<-web
m[M[[2]],M[[3]]]<-web
return(m)
}
return(replicate(N, sauve.fastc(web,m,M), simplify = FALSE))
}
}
null_P<-SauveR(1,matP,type="col")
null_Q<-SauveR(1,matQ,type="row")
null_P
View(null_P)
View(null_Q)
dimnames(null_P)
dimnames(null_P[[1]])
dimnames(null_Q[[1]])
apply(abs(null_P),2,sum)
null_P
abs(null_P)
abs(null_Q)
apply(abs(null_P[[1]]),2,sum)
apply(abs(null_Q[[1]]),1,sum)
(apply(abs(null_P[[1]]),2,sum)*apply(abs(null_Q[[1]]),1,sum))
M111_1<-(apply(abs(null_P[[1]]),2,sum)*apply(abs(null_Q[[1]]),1,sum))
sum(M111_1>0)
if(sum(M111_1>0)) print("yes")
sum(M111_1>0)>=least_connector
sum(M111_1>0)>=4
i=1
null_network<-vector("list",length=null_N)
null_N=100
i=1
null_network<-vector("list",length=null_N)
while(i<null_N){
null_P<-SauveR(1,matP,type="col")
null_Q<-SauveR(1,matQ,type="row")
MAT<-mat
MAT[V(trinet)$level==0,V(trinet)$level==1]<-null_P
MAT[V(trinet)$level==1,V(trinet)$level==2]<-null_Q
M111_1<-(apply(abs(null_P[[1]]),2,sum)*apply(abs(null_Q[[1]]),1,sum))
if(sum(M111_1>0)>=least_connector){
i<-i+1;
Nnetwork<-graph_from_adjacency_matrix(MAT,mode="max")
V(Nnetwork)$name<-V(trinet)$name
V(Nnetwork)$level<-V(trinet)$level
dd<-igraph::layout_with_sugiyama(Nnetwork,layers=igraph::V(Nnetwork)$level)$layout
dd[order(dd[dd[,2]==3,1]),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==3))
dd[order(dd[dd[,2]==2,1])+sum(dd[,2]==3),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==2))
dd[order(dd[dd[,2]==1,1])+sum(dd[,2]==3)+sum(dd[,2]==2),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==1))
Nnetwork$layout<-dd
null_network[[i]]<-Nnetwork }
}
i
i=1
null_network<-vector("list",length=null_N)
null_P<-SauveR(1,matP,type="col")
null_Q<-SauveR(1,matQ,type="row")
MAT<-mat
i=1
null_network<-vector("list",length=null_N)
while(i<null_N){
null_P<-SauveR(1,matP,type="col")
null_Q<-SauveR(1,matQ,type="row")
MAT<-mat
MAT[V(trinet)$level==0,V(trinet)$level==1]<-null_P[[1]]
MAT[V(trinet)$level==1,V(trinet)$level==2]<-null_Q[[1]]
M111_1<-(apply(abs(null_P[[1]]),2,sum)*apply(abs(null_Q[[1]]),1,sum))
if(sum(M111_1>0)>=least_connector){
i<-i+1;
Nnetwork<-graph_from_adjacency_matrix(MAT,mode="max")
V(Nnetwork)$name<-V(trinet)$name
V(Nnetwork)$level<-V(trinet)$level
dd<-igraph::layout_with_sugiyama(Nnetwork,layers=igraph::V(Nnetwork)$level)$layout
dd[order(dd[dd[,2]==3,1]),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==3))
dd[order(dd[dd[,2]==2,1])+sum(dd[,2]==3),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==2))
dd[order(dd[dd[,2]==1,1])+sum(dd[,2]==3)+sum(dd[,2]==2),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==1))
Nnetwork$layout<-dd
null_network[[i]]<-Nnetwork }
}
least_connector=4
i=1
null_network<-vector("list",length=null_N)
while(i<null_N){
null_P<-SauveR(1,matP,type="col")
null_Q<-SauveR(1,matQ,type="row")
MAT<-mat
MAT[V(trinet)$level==0,V(trinet)$level==1]<-null_P[[1]]
MAT[V(trinet)$level==1,V(trinet)$level==2]<-null_Q[[1]]
M111_1<-(apply(abs(null_P[[1]]),2,sum)*apply(abs(null_Q[[1]]),1,sum))
if(sum(M111_1>0)>=least_connector){
i<-i+1;
Nnetwork<-graph_from_adjacency_matrix(MAT,mode="max")
V(Nnetwork)$name<-V(trinet)$name
V(Nnetwork)$level<-V(trinet)$level
dd<-igraph::layout_with_sugiyama(Nnetwork,layers=igraph::V(Nnetwork)$level)$layout
dd[order(dd[dd[,2]==3,1]),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==3))
dd[order(dd[dd[,2]==2,1])+sum(dd[,2]==3),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==2))
dd[order(dd[dd[,2]==1,1])+sum(dd[,2]==3)+sum(dd[,2]==2),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==1))
Nnetwork$layout<-dd
null_network[[i]]<-Nnetwork }
}
?while
?while
}
devtools::load_all(".")
poc
poc(PPH_Coltparkmeadow)
devtools::load_all(".")
poc(PPH_Coltparkmeadow)
8/31
set.seed(12)
coid_obs<-coid(PPH_Coltparkmeadow)
cois_obs<-cois(PPH_Coltparkmeadow)
null_net<-vector("list",length=1000)
while (i<1000) {
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")# try "sub_both", "sub_
if(poc(tmp)[2]>=4){
null_net[[i]]<-tmp;
i<-i+1
}}
null_net<-vector("list",length=1000)
while (i<1000) {
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")[[1]]# try "sub_both", "sub_
if(poc(tmp)[2]>=4){
null_net[[i]]<-tmp;
i<-i+1
}}
poc(null_net)[[1]]
poc(null_net[[1]])
null_net[[1]]
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")[[1]]# try "sub_both", "sub_
poc(tmp)[2]>=4
poc(tmp)[2]
tmp
null_net<-vector("list",length=1000)
i<-1
while (i<1000) {
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")[[1]]# try "sub_both", "sub_
if(poc(tmp)[2]>=4){
null_net[[i]]<-tmp;
i<-i+1
}}
poc(null_net[[1]])
poc(null_net[[4]])
coid_null<-sapply(null_net,coid)
null_net[[1]]
coid_null<-pbsapply(null_net,coid)
library(pbapply)
coid_null<-pbsapply(null_net,coid)
null_net[[1000]]
null_net[[999]]
null_net<-vector("list",length=1000)
i<-1
while (i<=1000) {
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")[[1]]# try "sub_both", "sub_
if(poc(tmp)[2]>=4){
null_net[[i]]<-tmp;
i<-i+1
}}
coid_null<-pbsapply(null_net,coid)
cois_null<-sapply(null_net,cois)
hist(cois_null)
hist(coid_null)
null_net[[1]]
tmp<-tri_null(PPH_Coltparkmeadow,10, null_type = "sauve")
coid_null<-sapply( tmp,coid)
coid_null
SauveR<-function(N,m,type=c("row","col")){
M<-emptyR(m)
web <- as.matrix(M[[1]])
if(type=="row"){
sauve.fastr <- function(web,m,M) {
web[sample(sample(nrow(web))),]<-web
m[M[[2]],M[[3]]]<-web
return(m)
}
return(replicate(N, sauve.fastr(web,m,M), simplify = FALSE))
}
else{
sauve.fastc <- function(web,m,M) {
web[,sample(ncol(web))]<-web
m[M[[2]],M[[3]]]<-web
return(m)
}
return(replicate(N, sauve.fastc(web,m,M), simplify = FALSE))
}
}
tri_null<-function(trinet, null_N=100, null_type=c("sauve","sub_P","sub_Q","both_sub"), sub_method){
if(!null_type%in%c("sauve","sub_P","sub_Q","both_sub")|length(null_type)!=1){stop("Wrong input for null_type")}
if(null_type%in%c("sub_P","sub_Q","both_sub")&missing(sub_method)){stop("sub_method should be provided for subnetwork null models")}
mat<-as.matrix(trinet[])
matP<-mat[V(trinet)$level==0,V(trinet)$level==1]
matQ<-mat[V(trinet)$level==1,V(trinet)$level==2]
if(null_type=="sub_P"){
nm<-vegan::nullmodel(matP,sub_method)
null_list<-simulate(nm, nsim=null_N)
MAT<-mat
null_network<-apply(null_list,3, function(x){
MAT[V(trinet)$level==0,V(trinet)$level==1]<-x
Nnetwork<-graph_from_adjacency_matrix(MAT,mode="max")#max to create an undirected graph
V(Nnetwork)$name<-V(trinet)$name
V(Nnetwork)$level<-V(trinet)$level
dd<-igraph::layout_with_sugiyama(Nnetwork,layers=igraph::V(Nnetwork)$level)$layout
dd[order(dd[dd[,2]==3,1]),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==3))
dd[order(dd[dd[,2]==2,1])+sum(dd[,2]==3),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==2))
dd[order(dd[dd[,2]==1,1])+sum(dd[,2]==3)+sum(dd[,2]==2),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==1))
Nnetwork$layout<-dd
return(Nnetwork)
})
}
else if(null_type=="sub_Q"){
nm<-vegan::nullmodel(matQ,sub_method)
null_list<-simulate(nm, nsim=null_N)
MAT<-mat
null_network<-lapply(null_list,3, function(x){
MAT[V(network)$level==1,V(network)$level==2]<-x
Nnetwork<-graph_from_adjacency_matrix(MAT,mode="max")
V(Nnetwork)$name<-V(network)$name
V(Nnetwork)$level<-V(network)$level
dd<-igraph::layout_with_sugiyama(Nnetwork,layers=igraph::V(Nnetwork)$level)$layout
dd[order(dd[dd[,2]==3,1]),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==3))
dd[order(dd[dd[,2]==2,1])+sum(dd[,2]==3),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==2))
dd[order(dd[dd[,2]==1,1])+sum(dd[,2]==3)+sum(dd[,2]==2),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==1))
Nnetwork$layout<-dd
return(Nnetwork)
})
}
else if(null_type=="both_sub"){
nm_P<-vegan::nullmodel(matP,sub_method)
null_P_list<-simulate(nm_P, nsim=null_N)
nm_Q<-vegan::nullmodel(matQ,sub_method)
null_Q_list<-simulate(nm_Q, nsim=null_N)
MAT<-mat
null_network<-lapply(1:null_N,function(x){
MAT[V(trinet)$level==0,V(trinet)$level==1]<-null_P_list[,,x]
MAT[V(trinet)$level==1,V(trinet)$level==2]<-null_Q_list[,,x]
Nnetwork<-graph_from_adjacency_matrix(MAT,mode="max")
V(Nnetwork)$name<-V(trinet)$name
V(Nnetwork)$level<-V(trinet)$level
dd<-igraph::layout_with_sugiyama(Nnetwork,layers=igraph::V(Nnetwork)$level)$layout
dd[order(dd[dd[,2]==3,1]),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==3))
dd[order(dd[dd[,2]==2,1])+sum(dd[,2]==3),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==2))
dd[order(dd[dd[,2]==1,1])+sum(dd[,2]==3)+sum(dd[,2]==2),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==1))
Nnetwork$layout<-dd
return(Nnetwork)
})
}
else if(null_type=="sauve"){
null_list1<-SauveR(null_N,matP,type="col")
null_list2<-SauveR(null_N,matQ,type="row")
MAT<-mat
null_network<-lapply(1:null_N,function(x){
MAT[V(trinet)$level==0,V(trinet)$level==1]<-null_list1[[x]]
MAT[V(trinet)$level==1,V(trinet)$level==2]<-null_list2[[x]]
Nnetwork<-graph_from_adjacency_matrix(MAT,mode="max")
V(Nnetwork)$name<-V(trinet)$name
V(Nnetwork)$level<-V(trinet)$level
dd<-igraph::layout_with_sugiyama(Nnetwork,layers=igraph::V(Nnetwork)$level)$layout
dd[order(dd[dd[,2]==3,1]),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==3))
dd[order(dd[dd[,2]==2,1])+sum(dd[,2]==3),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==2))
dd[order(dd[dd[,2]==1,1])+sum(dd[,2]==3)+sum(dd[,2]==2),1]<-seq(min(dd[,1]),max(dd[,1]),length.out=sum(dd[,2]==1))
Nnetwork$layout<-dd
return(Nnetwork)
})
}
else
stop("Error: null_type is not a valid input!")
return(null_network)
}
tmp<-tri_null(PPH_Coltparkmeadow,10, null_type = "sauve")
sapply( tmp,coid)
set.seed(12)
coid_obs<-coid(PPH_Coltparkmeadow)
cois_obs<-cois(PPH_Coltparkmeadow)
null_net<-vector("list",length=1000)
i<-1
while (i<=1000) {
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")[[1]]# try "sub_both", "sub_
if(poc(tmp)[2]>=4){
null_net[[i]]<-tmp;
i<-i+1
}}
coid_null<-sapply( null_net,coid)
cois_null<-sapply(null_net,cois)
hist(coid_null)
hist(cois_null)
?poc
data(PPH_Coltparkmeadow)
Net <- PPH_Coltparkmeadow
poc(Net)
set.seed(12)
Net <- build_net(11,15,16,0.2)
poc(Net)
devtools::build_vignettes()
?ig_ddom
gi_ddom
ig_ddom
ig_ddom<-function(mat){
d <- diag(mat)
nd <- rowSums(mat)
nd <- nd - d
#node-level diagonal dominance
diag.dom<-abs(d) - abs(nd)
if(!is.null(rownames(mat))){
names(diag.dom)<-rownames(mat)
}else{names(diag.dom)<-1:nrow(mat)}
# average degree of diagonal dominance
avg.diag.dom <- mean(abs(d) - abs(nd))
return(list(avg.diag.dom=avg.diag.dom,diag.dom=diag.dom))
}
ig_ddom
ig_ddom
devtools::build_vignettes()
cois_obs<-cois(PPH_Coltparkmeadow)
null_net<-vector("list",length=1000)
#The simulated networks sometimes have too less connector nodes to calculate some metrics such as coid, cois. It is recommended to set a threshold (here is 4 at least)
while (i<1000) {
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")[[1]]# try "sub_both", "sub_
if(poc(tmp)[2]>=4){# ensuring the simulated networks have at least four connector nodes
null_net[[i]]<-tmp;
i<-i+1
}}
i=1
cois_obs<-cois(PPH_Coltparkmeadow)
null_net<-vector("list",length=1000)
#The simulated networks sometimes have too less connector nodes to calculate some metrics such as coid, cois. It is recommended to set a threshold (here is 4 at least)
while (i<1000) {
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")[[1]]# try "sub_both", "sub_
if(poc(tmp)[2]>=4){# ensuring the simulated networks have at least four connector nodes
null_net[[i]]<-tmp;
i<-i+1
}}
tmp
tri_null
set.seed(12)
coid_obs<-coid(PPH_Coltparkmeadow)
cois_obs<-cois(PPH_Coltparkmeadow)
null_net<-vector("list",length=1000)
#The simulated networks sometimes have too less connector nodes to calculate some metrics such as coid, cois. It is recommended to set a threshold (here is 4 at least)
i<-1
while (i<1000) {
tmp<-tri_null(PPH_Coltparkmeadow,1, null_type = "sauve")[[1]]# try "sub_both", "sub_
if(poc(tmp)[2]>=4){# ensuring the simulated networks have at least four connector nodes
null_net[[i]]<-tmp;
i<-i+1
}}
ig_ddom
#' Degree of diagonal dominance
#'
#' Calculating the degree of diagonal dominance for a tripartite network with intra-guild interactions.
#'
#' @param mat A square block interaction matrix representing a tripartite network including intra-guild and inter-guild interactions. See details.
#' @details
#' To calculate degree of diagonal dominance, the input should be a block matrix (\eqn{M}) to represent three groups of nodes (a-nodes, b-nodes and c-nodes): three intra-guild interaction matrices (\eqn{m_{aa},m_{bb},m_{cc}}),
#' two inter-guild matrices of a and b-nodes (\eqn{m_{ab},m_{ba}}), and two inter-guild matrices of b- and c-nodes(\eqn{m_{bc},m_{cb}}).
#' \deqn{
#'   \left(
#'     \begin{array}{ccc}
#'       m_{aa} & m_{ab} & 0        \\
#'       m_{ba} & m_{bb} & m_{bc}   \\
#'        0     & m_{cb} & m_{cc}
#'     \end{array}
#'   \right)
#' }
#' This function follows the definition by García-Callejas et al (2023). Diagonal dominance is a matrix property indicating diagonal elements are larger than the sum of non-diagonal elements.
#' In a tripartite network with intra-guild interactions, García-Callejas et al. propose a continuous diagonal dominance index by calculating the difference between the diagonal and the sum of non-diagonal elements for each node.
#' The average degree of diagonal dominance (\eqn{d}) is calculated by averaging all the nodes' values.
#'   \deqn{
#'          d = \sum_{i \in S} \frac{(M_{ii} - \sum_{j \in S,j \neq i}M_{ij})}{S}
#'        }
#'  Where S is the number of species in the tripartite network \eqn{M}.
#' @return
#' Return the average degree of diagonal dominance and a vector of diagonal dominance indices for all nodes.
#'
#' @references
#' García-Callejas, D., Godoy, O., Buche, L., Hurtado, M., Lanuza, J.B., Allen-Perkins, A. et al. (2023) Non-random interactions within and across guilds shape the potential to coexist in multi-trophic ecological communities. Ecology Letters, 26, 831–842.
#'
#' @examples
#'
#' ## A toy tripartite network with intra-guild negative interactions, inter-guild mutualistic interactions and inter-guild antagonistic interactions.
#' set.seed(12)
#' ##4 a-nodes,5 b-nodes, and 3 c-nodes
#'
#' ##intra-guild interaction matrices
#' mat_aa<-matrix(runif(16,-0.8,-0.2),4,4)
#' mat_bb<-matrix(runif(25,-0.8,-0.2),5,5)
#' mat_cc<-matrix(runif(9,-0.8,-0.2),3,3)
#'
#' ##inter-guild interaction matrices between a- and b-nodes.
#' mat_ab<-mat_ba<-matrix(sample(c(rep(0,8),runif(12,0,0.5))),4,5,byrow=T)# interaction probability = 12/20
#' mat_ba[mat_ba>0]<-runif(12,0,0.5);mat_ba<-t(mat_ba)
#'
#' ##inter-guild interaction matrices between b- and c-nodes.
#' mat_cb<-mat_bc<-matrix(sample(c(rep(0,8),runif(7,0,0.5))),3,5,byrow=T)# interaction probability = 7/15
#' mat_bc[mat_bc>0]<-runif(7,0,0.5);mat_bc<--t(mat_bc)
#' mat<-rbind(cbind(mat_aa,mat_ab,matrix(0,4,3)),cbind(mat_ba,mat_bb,mat_bc),cbind(matrix(0,3,4),mat_cb,mat_cc))
#'
#' ##set the node names
#' rownames(mat)<-c(paste0("a",1:4),paste0("b",1:5),paste0("c",1:3));colnames(mat)<-c(paste0("a",1:4),paste0("b",1:5),paste0("c",1:3))
#' diag(mat)<--1 #assume -1 for diagonal elements
#'
#' ##Visualization of the block matrix.
#' library(plot.matrix)
#' pal <- colorRampPalette(c("darkblue", "lightblue", "white", "pink", "darkred"))(100)
#' par(mar=c(5,5,5,5));plot(mat,col = pal,
#'     breaks = seq(-max(abs(mat)), max(abs(mat)), length.out = 101),  # 101 breaks for 100 colors
#'     main = "Matrix visualization")
#'     clip(x1 = 0.5,# Left boundary
#'     x2 = ncol(mat) + 0.5, # Right boundary
#'     y1 = 0.5,            # Top boundary
#'     y2 = nrow(mat) + 0.5  )
#'     abline(v = c(4.5,9.5), h = c(3.5,8.5), lwd = 3, col = "black")
#'
#' ig_ddom(mat)
ig_ddom<-function(mat){
d <- diag(mat)
nd <- rowSums(mat)
nd <- nd - d
#node-level diagonal dominance
diag.dom<-abs(d) - abs(nd)
if(!is.null(rownames(mat))){
names(diag.dom)<-rownames(mat)
}else{names(diag.dom)<-1:nrow(mat)}
# average degree of diagonal dominance
avg.diag.dom <- mean(abs(d) - abs(nd))
return(list(avg.diag.dom=avg.diag.dom,diag.dom=diag.dom))
}
ig_ddom(PPH_Coltparkmeadow)
devtools::load_all(".")
ig_ddom()
ig_ddom
devtools::load_all(".")
?ddom
?ig_ddom
ig_ddom
?diag
258+748
2800+137+404+417+423+423+379.88+366+177+368
g <- sample_gnp(10, 3 / 10)
devtools::load_all(".")
?ig_icmotif_count
?ig_icmotif_count
## A toy tripartite network with intra-guild negative interactions, inter-guild mutualistic interactions and inter-guild antagonistic interactions.
set.seed(12)
##4 a-nodes,5 b-nodes, and 3 c-nodes
##intra-guild interaction matrices
mat_aa<-matrix(runif(16,-0.8,-0.2),4,4)
mat_aa <- mat_aa + t(mat_aa); diag(mat_aa) <- 0
mat_bb<-matrix(runif(25,-0.8,-0.2),5,5)
mat_bb <- mat_bb + t(mat_bb); diag(mat_bb) <- 0
mat_cc<-matrix(runif(9,-0.8,-0.2),3,3)
mat_cc <- mat_cc + t(mat_cc); diag(mat_cc) <- 0
##inter-guild interaction matrices between a- and b-nodes.
mat_ab<-mat_ba<-matrix(sample(c(rep(0,8),runif(12,0,0.5))),4,5,byrow=T)# interaction probability = 12/20
mat_ba<-t(mat_ba)
##inter-guild interaction matrices between b- and c-nodes.
mat_cb<-mat_bc<-matrix(sample(c(rep(0,8),runif(7,0,0.5))),3,5,byrow=T)# interaction probability = 7/15
mat_bc<--t(mat_bc)
mat<-rbind(cbind(mat_aa,mat_ab,matrix(0,4,3)),cbind(mat_ba,mat_bb,mat_bc),cbind(matrix(0,3,4),mat_cb,mat_cc))
##set the node names
rownames(mat)<-c(paste0("a",1:4),paste0("b",1:5),paste0("c",1:3));colnames(mat)<-c(paste0("a",1:4),paste0("b",1:5),paste0("c",1:3))
mat[mat!=0] <- 1
myguilds=c(rep("a",4),rep("b",5),rep("c",3))
ig_icmotif_count(mat,guilds=myguilds,T)
ig_icmotif_count(mat,guilds=myguilds,F)
mat[mat!=0] <- runif(sum(mat[mat!=0] ),0,1)
ig_icmotif_count(mat,guilds=myguilds,T)
devtools::load_all(".")
## A toy tripartite network with intra-guild negative interactions, inter-guild mutualistic interactions and inter-guild antagonistic interactions.
set.seed(12)
##4 a-nodes,5 b-nodes, and 3 c-nodes
##intra-guild interaction matrices
mat_aa<-matrix(runif(16,-0.8,-0.2),4,4)
mat_aa <- mat_aa + t(mat_aa); diag(mat_aa) <- 0
mat_bb<-matrix(runif(25,-0.8,-0.2),5,5)
mat_bb <- mat_bb + t(mat_bb); diag(mat_bb) <- 0
mat_cc<-matrix(runif(9,-0.8,-0.2),3,3)
mat_cc <- mat_cc + t(mat_cc); diag(mat_cc) <- 0
##inter-guild interaction matrices between a- and b-nodes.
mat_ab<-mat_ba<-matrix(sample(c(rep(0,8),runif(12,0,0.5))),4,5,byrow=T)# interaction probability = 12/20
mat_ba<-t(mat_ba)
##inter-guild interaction matrices between b- and c-nodes.
mat_cb<-mat_bc<-matrix(sample(c(rep(0,8),runif(7,0,0.5))),3,5,byrow=T)# interaction probability = 7/15
mat_bc<--t(mat_bc)
mat<-rbind(cbind(mat_aa,mat_ab,matrix(0,4,3)),cbind(mat_ba,mat_bb,mat_bc),cbind(matrix(0,3,4),mat_cb,mat_cc))
##set the node names
rownames(mat)<-c(paste0("a",1:4),paste0("b",1:5),paste0("c",1:3));colnames(mat)<-c(paste0("a",1:4),paste0("b",1:5),paste0("c",1:3))
mat[mat!=0] <- runif(sum(mat[mat!=0] ),0,1)
sum(mat[mat!=0] )

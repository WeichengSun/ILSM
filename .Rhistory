E(net1)$weight=1
E(net2)$weight=1
}
net1_degree <- strength(net1)[node]
net2_degree <- strength(net2)[node]
net_degree <- net1_degree * net2_degree
if(!weighted){
E(network)$weight=1
}
#net_closeness
net_closeness<-1/rowSums(distances(network,v=node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all"))
#net_betweenness
#tmp<-lapply(V(network)$name[V(network)$level%in% c(0)],function(i){all_shortest_paths(network,from=i,to=V(network)$name[V(network)$level%in% c(2)])$vpaths})
#tmp<-unlist(tmp,recursive = F)
b<-as.vector(V(network)[V(network)$level%in% c(1)])
a<-as.vector(V(network)[V(network)$level%in% c(0)])
c<-as.vector(V(network)[V(network)$level%in% c(2)])
tmp<-apply(expand.grid(a,c),1,function(p){do.call(rbind,all_shortest_paths(network,from=p[1],to=p[2])$vpaths)})
tmp<-tmp[!sapply(tmp,is.null)]
res<-sapply(tmp,function(x){
x<-x[,2:(ncol(x)-1),drop=F]
res0<-apply(x,1,function(y) b%in%y)
rowSums(res0)/nrow(x)
})
#tmp<-data.frame(do.call(rbind,tmp))
#names(tmp)<-c("a","b","c")
# res<-apply(expand.grid(a,c),1,function(p){
#               is_ac<-sapply(tmp,function(x){x[1]==p[1]&x[length(x)]==p[2]})
#               g_ac<-sum(is_ac)#nrow(tmp[tmp$a==p[1]&tmp$c==p[2],])
#               sapply(b,function(x){sapply(tmp[is_ac], function(y) {y[-c(1,length(y))]%in%x})/g_ac})
#            })
net_betweenness<-rowSums(res,na.rm=T)
Centrality  <- data.frame(node=node, interconnection_degree=net_degree, interconnection_betweenness=net_betweenness,interconnection_closeness=net_closeness)
return(Centrality)
}
network<-PPH_Coltparkmeadow
network0 <- adjust_net(network,weighted=T)
connector_node=V(network0)$name[V(network0)$level==1]
mat <- as.matrix(network[])
mat1 <- mat[V(network)$name[V(network)$level%in% (0:1)],V(network)$name[V(network)$level%in% (0:1)]]
net1 <- graph_from_adjacency_matrix(mat1,weighted = T,mode = "max")
mat2 <- mat[V(network)$name[V(network)$level%in%(1:2)],V(network)$name[V(network)$level %in% (1:2)]]
net2 <- graph_from_adjacency_matrix(mat2,weighted = T,mode = "max")
if(!weighted){
E(net1)$weight=1
E(net2)$weight=1
}
net1_degree <- strength(net1)[connector_node]
net2_degree <- strength(net2)[connector_node]
net_degree <- net1_degree * net2_degree
net_degree
#net_closeness
net_closeness<-1/rowSums(distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all"))
net_closeness
connector_node
V(network)$name[V(network)$level%in% c(0,2)]
rowSums(distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all"))
distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all")
class(distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all"))
?complete.cases
complete.cases(distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all"))
#net_closeness
dist_res<-distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all")
dist_res[,complete.cases(dist_res)]
dist_res<-as.data.frame(dist_res)
dist_res[,complete.cases(dist_res)]
dist_res<-distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all")
dist_res<-as.data.frame(dist_res)
complete.cases(dist_res)
is.infinite(dist_res$`he_Lriomyza taraxaci`)
net_closeness<-1/apply(dist_res,1,function(x){sum(x[!is.na(x)&!is.infinite(x)])})##有INF列
net_closeness
b<-as.vector(V(network)[V(network)$level%in% c(1)])
a<-as.vector(V(network)[V(network)$level%in% c(0)])
c<-as.vector(V(network)[V(network)$level%in% c(2)])
tmp<-apply(expand.grid(a,c),1,function(p){do.call(rbind,all_shortest_paths(network,from=p[1],to=p[2])$vpaths)})
tmp<-tmp[!sapply(tmp,is.null)]
res<-sapply(tmp,function(x){
x<-x[,2:(ncol(x)-1),drop=F]
res0<-apply(x,1,function(y) b%in%y)
rowSums(res0)/nrow(x)
})
rowSums(res,na.rm=T)
as.vector(V(network)[V(network)$level%in% c(1)])
as.vector(V(network)[V(network)$level%in% c(1)])
connector_node
#tmp<-lapply(V(network)$name[V(network)$level%in% c(0)],function(i){all_shortest_paths(network,from=i,to=V(network)$name[V(network)$level%in% c(2)])$vpaths})
#tmp<-unlist(tmp,recursive = F)
connector_node=as.vector(V(network0)[V(network0)$level==1])
connector_node
connector_node=as.vector(V(network0)[V(network0)$level==1])
b<-as.vector(V(network)[V(network)$level%in% c(1)])
a<-as.vector(V(network)[V(network)$level%in% c(0)])
c<-as.vector(V(network)[V(network)$level%in% c(2)])
tmp<-apply(expand.grid(a,c),1,function(p){do.call(rbind,all_shortest_paths(network,from=p[1],to=p[2])$vpaths)})
tmp<-tmp[!sapply(tmp,is.null)]
res<-sapply(tmp,function(x){
x<-x[,2:(ncol(x)-1),drop=F]
res0<-apply(x,1,function(y) connector_node%in%y)
rowSums(res0)/nrow(x)
})
#tmp<-data.frame(do.call(rbind,tmp))
#names(tmp)<-c("a","b","c")
# res<-apply(expand.grid(a,c),1,function(p){
#               is_ac<-sapply(tmp,function(x){x[1]==p[1]&x[length(x)]==p[2]})
#               g_ac<-sum(is_ac)#nrow(tmp[tmp$a==p[1]&tmp$c==p[2],])
#               sapply(b,function(x){sapply(tmp[is_ac], function(y) {y[-c(1,length(y))]%in%x})/g_ac})
#            })
net_betweenness<-rowSums(res,na.rm=T)
net_betweenness
node_icc <- function(network.or.subnet_mat1,subnet_mat2=NULL,weighted=F){
if(inherits(network.or.subnet_mat1,"igraph")==T){
network <- network.or.subnet_mat1
}
else if(inherits(network.or.subnet_mat1,c("matrix","data.frame"))==T &&
inherits(subnet_mat2,c("matrix","data.frame"))==T){
network <- igraph_from_matrices(network.or.subnet_mat1,subnet_mat2,weighted=weighted)
}
else
stop("please check the type of 'network.or.subnet_mat1'")
network0 <- adjust_net(network,weighted=T)
connector_node=V(network0)$name[V(network0)$level==1]
mat <- as.matrix(network[])
mat1 <- mat[V(network)$name[V(network)$level%in% (0:1)],V(network)$name[V(network)$level%in% (0:1)]]
net1 <- graph_from_adjacency_matrix(mat1,weighted = T,mode = "max")
mat2 <- mat[V(network)$name[V(network)$level%in%(1:2)],V(network)$name[V(network)$level %in% (1:2)]]
net2 <- graph_from_adjacency_matrix(mat2,weighted = T,mode = "max")
if(!weighted){
E(net1)$weight=1
E(net2)$weight=1
}
net1_degree <- strength(net1)[connector_node]
net2_degree <- strength(net2)[connector_node]
net_degree <- net1_degree * net2_degree
if(!weighted){
E(network)$weight=1
}
#net_closeness
dist_res<-distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all")
dist_res<-as.data.frame(dist_res)
net_closeness<-1/apply(dist_res,1,function(x){sum(x[!is.na(x)&!is.infinite(x)])})##有INF列
#net_betweenness
#tmp<-lapply(V(network)$name[V(network)$level%in% c(0)],function(i){all_shortest_paths(network,from=i,to=V(network)$name[V(network)$level%in% c(2)])$vpaths})
#tmp<-unlist(tmp,recursive = F)
connector_node=as.vector(V(network0)[V(network0)$level==1])
b<-as.vector(V(network)[V(network)$level%in% c(1)])
a<-as.vector(V(network)[V(network)$level%in% c(0)])
c<-as.vector(V(network)[V(network)$level%in% c(2)])
tmp<-apply(expand.grid(a,c),1,function(p){do.call(rbind,all_shortest_paths(network,from=p[1],to=p[2])$vpaths)})
tmp<-tmp[!sapply(tmp,is.null)]
res<-sapply(tmp,function(x){
x<-x[,2:(ncol(x)-1),drop=F]
res0<-apply(x,1,function(y) connector_node%in%y)
rowSums(res0)/nrow(x)
})
#tmp<-data.frame(do.call(rbind,tmp))
#names(tmp)<-c("a","b","c")
# res<-apply(expand.grid(a,c),1,function(p){
#               is_ac<-sapply(tmp,function(x){x[1]==p[1]&x[length(x)]==p[2]})
#               g_ac<-sum(is_ac)#nrow(tmp[tmp$a==p[1]&tmp$c==p[2],])
#               sapply(b,function(x){sapply(tmp[is_ac], function(y) {y[-c(1,length(y))]%in%x})/g_ac})
#            })
net_betweenness<-rowSums(res,na.rm=T)
Centrality  <- data.frame(node=connector_node, interconnection_degree=net_degree, interconnection_betweenness=net_betweenness,interconnection_closeness=net_closeness)
return(Centrality)
}
data(PPH_Coltparkmeadow)
Net <- PPH_Coltparkmeadow
node_icc(Net)
set.seed(13)
E(Net)$weight<-runif(length(E(Net)),0.1,1)#random weights assigned
node_icc(Net,weighted=F)
node_icc(Net,weighted=T)
network<-PPH_Coltparkmeadow
network0 <- adjust_net(network,weighted=T)
connector_node=V(network0)$name[V(network0)$level==1]
mat <- as.matrix(network[])
mat1 <- mat[V(network)$name[V(network)$level%in% (0:1)],V(network)$name[V(network)$level%in% (0:1)]]
net1 <- graph_from_adjacency_matrix(mat1,weighted = T,mode = "max")
mat2 <- mat[V(network)$name[V(network)$level%in%(1:2)],V(network)$name[V(network)$level %in% (1:2)]]
net2 <- graph_from_adjacency_matrix(mat2,weighted = T,mode = "max")
if(!weighted){
E(net1)$weight=1
E(net2)$weight=1
}
net1_degree <- strength(net1)[connector_node]
net2_degree <- strength(net2)[connector_node]
net_degree <- net1_degree * net2_degree
if(!weighted){
E(network)$weight=1
}
#net_closeness
dist_res<-distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all")
dist_res<-as.data.frame(dist_res)
net_closeness<-1/apply(dist_res,1,function(x){sum(x[!is.na(x)&!is.infinite(x)])})##有INF列
net_closeness
#tmp<-lapply(V(network)$name[V(network)$level%in% c(0)],function(i){all_shortest_paths(network,from=i,to=V(network)$name[V(network)$level%in% c(2)])$vpaths})
#tmp<-unlist(tmp,recursive = F)
connector_node=as.vector(V(network0)[V(network0)$level==1])
connector_node
b<-as.vector(V(network)[V(network)$level%in% c(1)])
a<-as.vector(V(network)[V(network)$level%in% c(0)])
c<-as.vector(V(network)[V(network)$level%in% c(2)])
tmp<-apply(expand.grid(a,c),1,function(p){do.call(rbind,all_shortest_paths(network,from=p[1],to=p[2])$vpaths)})
tmp<-tmp[!sapply(tmp,is.null)]
tmp[[1]]
connector_node
V(network0)$name[V(network0)$level==1]
V(network0)
v(network)[35]
V(network)[35]
mat <- as.matrix(network[])
View(mat)
View(mat1)
network0 <- adjust_net(network,weighted=T)
V(network0)$name[V(network0)$level==1]
network0 <- adjust_net(network,weighted=T)
connector_node=V(network0)$name[V(network0)$level==1]
connector_node
V(network)[V(network)$name=="pl_Cerastium fontanum"]
V(network)
V(network)[V(network)$name=="pl_Cerastium fontanum"]
V(network)$name
as.vector(V(network0)[V(network0)$level==1])
#tmp<-lapply(V(network)$name[V(network)$level%in% c(0)],function(i){all_shortest_paths(network,from=i,to=V(network)$name[V(network)$level%in% c(2)])$vpaths})
#tmp<-unlist(tmp,recursive = F)
connector_ID=as.vector(V(network)[V(network)$name%in%connector_node])
connector_ID
connector_ID=as.vector(V(network)[V(network)$name%in%connector_node])
b<-as.vector(V(network)[V(network)$level%in% c(1)])
a<-as.vector(V(network)[V(network)$level%in% c(0)])
c<-as.vector(V(network)[V(network)$level%in% c(2)])
tmp<-apply(expand.grid(a,c),1,function(p){do.call(rbind,all_shortest_paths(network,from=p[1],to=p[2])$vpaths)})
tmp<-tmp[!sapply(tmp,is.null)]
res<-sapply(tmp,function(x){
x<-x[,2:(ncol(x)-1),drop=F]
res0<-apply(x,1,function(y) connector_ID%in%y)
rowSums(res0)/nrow(x)
})
rowSums(res,na.rm=T)
data(PPH_Coltparkmeadow)
Net <- PPH_Coltparkmeadow
node_icc(Net)
set.seed(13)
E(Net)$weight<-runif(length(
E(Net)),0.1,1)#random weights assigned
node_icc(Net,weighted=T)
node_icc <- function(network.or.subnet_mat1,subnet_mat2=NULL,weighted=F){
if(inherits(network.or.subnet_mat1,"igraph")==T){
network <- network.or.subnet_mat1
}
else if(inherits(network.or.subnet_mat1,c("matrix","data.frame"))==T &&
inherits(subnet_mat2,c("matrix","data.frame"))==T){
network <- igraph_from_matrices(network.or.subnet_mat1,subnet_mat2,weighted=weighted)
}
else
stop("please check the type of 'network.or.subnet_mat1'")
network0 <- adjust_net(network,weighted=T)
connector_node=V(network0)$name[V(network0)$level==1]
mat <- as.matrix(network[])
mat1 <- mat[V(network)$name[V(network)$level%in% (0:1)],V(network)$name[V(network)$level%in% (0:1)]]
net1 <- graph_from_adjacency_matrix(mat1,weighted = T,mode = "max")
mat2 <- mat[V(network)$name[V(network)$level%in%(1:2)],V(network)$name[V(network)$level %in% (1:2)]]
net2 <- graph_from_adjacency_matrix(mat2,weighted = T,mode = "max")
if(!weighted){
E(net1)$weight=1
E(net2)$weight=1
}
net1_degree <- strength(net1)[connector_node]
net2_degree <- strength(net2)[connector_node]
net_degree <- net1_degree * net2_degree
if(!weighted){
E(network)$weight=1
}
#net_closeness
dist_res<-distances(network,v=connector_node,to=V(network)$name[V(network)$level%in% c(0,2)],mode="all")
dist_res<-as.data.frame(dist_res)
net_closeness<-1/apply(dist_res,1,function(x){sum(x[!is.na(x)&!is.infinite(x)])})##有INF列
#net_betweenness
#tmp<-lapply(V(network)$name[V(network)$level%in% c(0)],function(i){all_shortest_paths(network,from=i,to=V(network)$name[V(network)$level%in% c(2)])$vpaths})
#tmp<-unlist(tmp,recursive = F)
connector_ID=as.vector(V(network)[V(network)$name%in%connector_node])
b<-as.vector(V(network)[V(network)$level%in% c(1)])
a<-as.vector(V(network)[V(network)$level%in% c(0)])
c<-as.vector(V(network)[V(network)$level%in% c(2)])
tmp<-apply(expand.grid(a,c),1,function(p){do.call(rbind,all_shortest_paths(network,from=p[1],to=p[2])$vpaths)})
tmp<-tmp[!sapply(tmp,is.null)]
res<-sapply(tmp,function(x){
x<-x[,2:(ncol(x)-1),drop=F]
res0<-apply(x,1,function(y) connector_ID%in%y)
rowSums(res0)/nrow(x)
})
#tmp<-data.frame(do.call(rbind,tmp))
#names(tmp)<-c("a","b","c")
# res<-apply(expand.grid(a,c),1,function(p){
#               is_ac<-sapply(tmp,function(x){x[1]==p[1]&x[length(x)]==p[2]})
#               g_ac<-sum(is_ac)#nrow(tmp[tmp$a==p[1]&tmp$c==p[2],])
#               sapply(b,function(x){sapply(tmp[is_ac], function(y) {y[-c(1,length(y))]%in%x})/g_ac})
#            })
net_betweenness<-rowSums(res,na.rm=T)
Centrality  <- data.frame(node=connector_node, interconnection_degree=net_degree, interconnection_betweenness=net_betweenness,interconnection_closeness=net_closeness)
return(Centrality)
}
node_icc(Net,weighted=T)
node_icc(Net)
connector_ID=as.vector(V(network)[V(network)$name%in%connector_node])
b<-as.vector(V(network)[V(network)$level%in% c(1)])
a<-as.vector(V(network)[V(network)$level%in% c(0)])
c<-as.vector(V(network)[V(network)$level%in% c(2)])
tmp<-apply(expand.grid(a,c),1,function(p){do.call(rbind,all_shortest_paths(network,from=p[1],to=p[2])$vpaths)})
tmp<-tmp[!sapply(tmp,is.null)]
sapply(tmp,ncol)
sapply(tmp,nrow)
View(res)
data(PPH_Coltparkmeadow)
Net <- PPH_Coltparkmeadow
node_icc(Net)
set.seed(13)
E(Net)$weight<-runif(length(E(Net)),0.1,1)#random weights assigned
node_icc(Net,weighted=T)
data(PPH_Coltparkmeadow)
Net <- PPH_Coltparkmeadow
node_icc(Net)
set.seed(15)
E(Net)$weight<-runif(length(E(Net)),0.1,2)#random weights assigned
node_icc(Net,weighted=T)
node_icc
?node_icc
?node_icc
set.seed(12)
md1 <- matrix(sample(c(0,1),5*8,replace=TRUE),5,8,dimnames = list(paste0("b",1:5),paste0("c",1:8)))
md2 <- matrix(sample(c(0,1),20*30,replace=TRUE),20,30,dimnames = list(paste0("b",1:20),paste0("a",1:30)))
node_icc(md1,md2)
node_icc(PPH_Coltparkmeadow)
node_icc(PPH_Coltparkmeadow,weighted=T)
Net <- PPH_Coltparkmeadow
node_icc(Net)
data(PPH_Coltparkmeadow)
Net <- PPH_Coltparkmeadow
node_icc(Net)
E(Net)$weight<-runif(length(E(Net)),0.1,2)#random weights assigned
node_icc(Net,weighted=T)
devtools::load_all(".")
data(PPH_Coltparkmeadow)
Net <- PPH_Coltparkmeadow
node_icc(Net)
E(Net)$weight<-runif(length(E(Net)),0.1,2)#random weights assigned
node_icc(Net,weighted=T)
node_icc(PPH_Coltparkmeadow)
node_icc(PPH_Coltparkmeadow,weighted=T)
coid(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow,weighted=T)
data("PPH_Coltparkmeadow")
E(PPH_Coltparkmeadow)$weight<-runif(length(E(PPH_Coltparkmeadow)),0.1,1)#Generating random weights for showing
coid(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow,weighted=T)
devtools::load_all(".")
E(PPH_Coltparkmeadow)$weight
library(ILSM);library(igraph)
data("PPH_Coltparkmeadow")
E(PPH_Coltparkmeadow)$weight<-runif(length(E(PPH_Coltparkmeadow)),0.1,1)#Generating random weights for showing
poc(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow,weighted=T)
PPH_Coltparkmeadow
network.or.subnet_mat1<-PPH_Coltparkmeadow
network<-adjust_net(network.or.subnet_mat1,weighted=T)
adjust_net<-function(network,weighted=T){
PHP1<-as.matrix(network[])
PH1<-PHP1[(V(network)$level)==0,(V(network)$level)==1]
HP1<-PHP1[(V(network)$level)==1,(V(network)$level)==2]
M111_1<-(apply(abs(PH1),2,sum)*apply(abs(HP1),1,sum))
if(sum(M111_1>0)){
PHP_test<-PHP1[!rownames(PHP1)%in%names(M111_1)[(M111_1==0)],!rownames(PHP1)%in%names(M111_1)[(M111_1==0)]]
# apply(PHP_test[(rowSums(PH)),],1,function(x){})
PHP_test1<-PHP_test[!rownames(PHP_test)%in%rownames(PH1)[rowSums(PHP_test[rownames(PH1),])==0],!rownames(PHP_test)%in%rownames(PH1)[rowSums(PHP_test[rownames(PH1),])==0]]
PHP_test2<-PHP_test1[!rownames(PHP_test1)%in%colnames(HP1)[colSums(PHP_test1[,colnames(HP1)])==0],!rownames(PHP_test1)%in%colnames(HP1)[colSums(PHP_test1[,colnames(HP1)])==0]]
NODE_logi<-(!rownames(PHP1)%in%c(names(M111_1)[(M111_1==0)],rownames(PH1)[rowSums(PHP_test[rownames(PH1),])==0],colnames(HP1)[colSums(PHP_test1[,colnames(HP1)])==0]))
PHP_test2<-igraph::graph_from_adjacency_matrix(PHP_test2,weighted = weighted)
V(PHP_test2)$name<-(V(network)$name)[NODE_logi]
V(PHP_test2)$level<-(V(network)$level)[NODE_logi]
return(PHP_test2)
}
else
stop("No connector nodes.")
}
network<-adjust_net(network.or.subnet_mat1,weighted=T)
mat<-as.matrix(network[])
mat1<-t(mat[V(network)$level==0,V(network)$level==1])
mat2<-mat[V(network)$level==1,V(network)$level==2]
mat_1<-matrix(0,length(matrow),ncol(mat1))
#calculating the coid
logi<-(as.numeric(rowSums(mat1))*as.numeric(rowSums(mat2)))!=0
mat1<-mat1[logi,]
mat2<-mat2[logi,]
if(!weighted){
mat1[mat1>0]<-1
mat2[mat2>0]<-1
general_cor<-cor(as.numeric(rowSums(mat1)),as.numeric(rowSums(mat2)), method=method )
message(paste0("CoID= ",seq=round(general_cor,8),";"),"\n")
return(general_cor)
}
general_cor<-cor(as.numeric(rowSums(mat1)),as.numeric(rowSums(mat2)), method=method )
mat1
mat2
method="kendall"
general_cor<-cor(as.numeric(rowSums(mat1)),as.numeric(rowSums(mat2)), method=method )
general_cor
coid(PPH_Coltparkmeadow,weighted=T)
coid(PPH_Coltparkmeadow)
PPH_Coltparkmeadow
plot(PPH_Coltparkmeadow)
load("data/PPH_Coltparkmeadow.rda")
View(PPH_Coltparkmeadow)
plot(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow,weighted=T)
coid(network.or.subnet_mat1,weighted=T)
class(PPH_Coltparkmeadow)
inherits(PPH_Coltparkmeadow,"igraph")==T
coid<-function(network.or.subnet_mat1, subnet_mat2=NULL, weighted=FALSE,weight_type="shannon",method="kendall" ){
if(inherits(network.or.subnet_mat1,"igraph")==T){
network<-adjust_net(network.or.subnet_mat1,weighted=T)
mat<-as.matrix(network[])
mat1<-t(mat[V(network)$level==0,V(network)$level==1])
mat2<-mat[V(network)$level==1,V(network)$level==2]
}
else if(inherits(network.or.subnet_mat1,c("matrix","data.frame"))==T && inherits(subnet_mat2,c("matrix","data.frame"))==T){
mat1<-network.or.subnet_mat1
mat2<-subnet_mat2
if(is.null(rownames(mat1)) | is.null(rownames(mat2))){
message("No rownames for matrices, so row IDs are used!")
rownames(mat1)<-paste0("mid_spe",seq=1:nrow(mat1))
rownames(mat2)<-paste0("mid_spe",seq=1:nrow(mat2))
matrow<-unique(c(rownames(mat1),rownames(mat2)))
}
#if(nrow(mat1)!=nrow(mat2))
#   message("re-check whether the row name of network.or.subnet_mat1 is corresponding to the row name of subnet_mat2!!!")
if(!is.null(rownames(mat1)) & !is.null(rownames(mat2)) & sum(is.na(rownames(mat1)))==0 & sum(is.na(rownames(mat2)))==0){
matrow<-unique(c(rownames(mat1),rownames(mat2)))
if(length(matrow)==0) stop("No connectors existed.")
}
else {stop("Make sure matrices either have no row names or have full row names. No NA!")}
mat_1<-matrix(0,length(matrow),ncol(mat1))
rownames(mat_1)<-matrow
mat_1[rownames(mat1),]<-mat1
#mat_1[mat_1>0]<-1
mat_2<-matrix(0,length(matrow),ncol(mat2))
rownames(mat_2)<-matrow
mat_2[rownames(mat2),]<-mat2
#mat_2[mat_2>0]<-1
mat1<-mat_1
mat2<-mat_2
}
else
stop("Please check the type of 'network.or.subnet_mat1' or 'subnet_mat2'")
#calculating the coid
logi<-(as.numeric(rowSums(mat1))*as.numeric(rowSums(mat2)))!=0
mat1<-mat1[logi,]
mat2<-mat2[logi,]
if(!weighted){
mat1[mat1>0]<-1
mat2[mat2>0]<-1
general_cor<-cor(as.numeric(rowSums(mat1)),as.numeric(rowSums(mat2)), method=method )
message(paste0("CoID= ",seq=round(general_cor,8),";"),"\n")
return(general_cor)
}
else{
subnet_mat1<-mat1
subnet_mat2<-mat2
logi<-(as.numeric(rowSums(subnet_mat1))*as.numeric(rowSums(subnet_mat2)))!=0
subnet_mat1<-subnet_mat1[logi,]
subnet_mat2<-subnet_mat2[logi,]
general_weight1<-apply(subnet_mat1,1,function(x){
if(sum(x)==0){return(0)}
else{x<-x[x!=0];
if (weight_type=="shannon"){return(-sum((x/sum(x))*(log(x/sum(x)))))}
else if (weight_type=="sum"){return(sum(x))}
else{ stop("weight_type should be 'shannon' or 'sum'")}
}
})
general_weight2<-apply(subnet_mat2,1,function(x){
if(sum(x)==0){return(0)}
else{x<-x[x!=0];
if (weight_type=="shannon"){return(-sum((x/sum(x))*(log(x/sum(x)))))}
else if (weight_type=="sum"){return(sum(x))}
else{ stop("weight_type should be 'shannon' or 'sum'")}
}
})
general_weight_cor<-cor(general_weight1,general_weight2,method=method)
message(paste0("CoID_weighted= ",seq=round(general_weight_cor,8),";"),"\n")
return(general_weight_cor)
}
}
coid(network.or.subnet_mat1,weighted=T)
devtools::load_all(".")
plot(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow,weighted=T)
?coid
Net <- PPH_Coltparkmeadow
coid(Net)
set.seed(13)
E(Net)$weight<-runif(length(E(Net)),0.1,1)#random weights assigned
coid(Net,weighted=T)
coid(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow,weighted=T)
data(PPH_Coltparkmeadow)
E(PPH_Coltparkmeadow)$weight<-runif(length(E(PPH_Coltparkmeadow)),0.1,1)
coid(PPH_Coltparkmeadow)
coid(PPH_Coltparkmeadow,weighted=T)
remove.packages("ILSM")
